/*
    Link: https://leetcode.com/problems/largest-local-values-in-a-matrix/
    Time complexity: O(n^2)
    Space complexity: O(n^2)
*/
class Solution {
public:
    int maxof(int i, int j, vector<vector<int>>& grid){
        
        int res = grid[i][j];
        res = max(res,grid[i-1][j-1]);
        res = max(res,grid[i-1][j]);
        res = max(res,grid[i-1][j+1]);
        res = max(res,grid[i][j-1]);
        res = max(res,grid[i][j+1]);
        res = max(res,grid[i+1][j-1]);
        res = max(res,grid[i+1][j]);
        res = max(res,grid[i+1][j+1]);
        
        return res;
        
    }
    vector<vector<int>> largestLocal(vector<vector<int>>& grid) {
        
        vector<vector<int>> ans;
        vector<int> curr;
        
        for(int i = 1; i < grid.size()-1; ++i){
            
            curr.clear();
            for(int j = 1; j < grid[0].size()-1; ++j)
                curr.push_back(maxof(i,j,grid));
            ans.push_back(curr);
        }

        
        return ans;
        
    }
};
