/*
    Link: https://leetcode.com/problems/sum-of-left-leaves/
    Time complexity: O(v)
    Space complexity: O(v)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        
        if(!root) return 0;
        TreeNode* curr = root;
        int sum = 0;
        queue<pair<TreeNode*,bool>> toVisit;
        for(toVisit.push({curr,0}); !toVisit.empty(); toVisit.pop()){
            
            if(!toVisit.front().first->left && !toVisit.front().first->right && toVisit.front().second) sum += toVisit.front().first->val;
            if(toVisit.front().first->left) toVisit.push({toVisit.front().first->left,1});
            if(toVisit.front().first->right) toVisit.push({toVisit.front().first->right,0});
        }
        
        return sum;
        
        
    }
};
