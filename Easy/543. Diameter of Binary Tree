/*
    Link: https://leetcode.com/problems/diameter-of-binary-tree/
    Time complexity: O(v)
    Space complexity: O(v)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans = 0;
    int diameterOfBinaryTree(TreeNode* root) {
        
        maxPath(root);
        
        return ans ? ans-1 : 0;
        
    }
    int maxPath(TreeNode* root){
        
        if(!root) return 0;
        
        int maxleft = maxPath(root->left);
        int maxright = maxPath(root->right);
        
        ans = max(ans,maxleft+maxright+1);
        
        return max(maxleft+1,maxright+1);
        
    }
};
