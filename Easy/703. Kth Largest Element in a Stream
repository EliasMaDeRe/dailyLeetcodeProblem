/*
    Link: https://leetcode.com/problems/kth-largest-element-in-a-stream/
    Time complexity: O(log(k))
    Space complexity: O(k)
*/
class KthLargest {
public:
    priority_queue<int,vector<int>,greater<int>> b;
    int index;
    KthLargest(int k, vector<int>& nums) {
        index = k;
        for(int i = 0; i < nums.size(); ++i){
            
            b.push(nums[i]);
            if(b.size() > k) b.pop();
            
            
        }
    }
    
    int add(int val) {
        b.push(val);
        if(b.size() > index) b.pop();
        return b.top();
    }
};

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */
