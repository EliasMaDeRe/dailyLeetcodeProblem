/*
    Link: https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/
    Time complexity: O(n)
    Space complexity: O(log(n))
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        
        TreeNode* root = helper(0,nums.size()-1,nums);
        
        return root;  
        
        
    }
    TreeNode* helper(int st, int e, vector<int>& nums){
        
        if(st > e) return NULL;
        
        TreeNode* curr = new TreeNode(nums[(st+e)/2]);    
        
        if(e-st == 0) return curr;
        
        curr->left = helper(st,((st+e)/2)-1,nums);
        curr->right = helper(((st+e)/2)+1,e,nums);
        
        return curr;
        
    }
};
