/*
    Link: https://leetcode.com/problems/invert-binary-tree/submissions/
    Time complexity: O(n)
    Space complexity: O(n)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        
        TreeNode* curr = root;
        queue<TreeNode*> visit;
        if(curr) visit.push(curr);
        while(!visit.empty()){
            
            TreeNode* aux = visit.front()->left;
            visit.front()->left = visit.front()->right;
            visit.front()->right = aux;
            if(visit.front()->left) visit.push(visit.front()->left);
            if(visit.front()->right) visit.push(visit.front()->right);
            visit.pop();
            
        }
        
        return root;
        
    }
};
