/*
    Link: https://leetcode.com/problems/binary-tree-cameras/submissions/
    Time complexity: O(n)
    Space complexity: O(n)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minCameraCover(TreeNode* root) {
        
        if(!root->left && !root->right) return 1;
        
        TreeNode* curr = root;
        int ans = 0;
        stack<TreeNode*> visit;
        stack<TreeNode*> visit2;
        
        visit.push(curr);
    
      //status de camara NEEDS / IS
        map<TreeNode*,pair<bool,bool> > needscamera;


        bool childiscamera = false;
        
        
        while(!visit.empty()){        
            
            curr = visit.top();
            visit.pop();
            visit2.push(curr);
            if(curr->right) visit.push(curr->right);
            if(curr->left) visit.push(curr->left);
            
            
        }
        
        while(!visit2.empty()){
        
            curr = visit2.top();
            visit2.pop();
            if(needscamera[curr->left].first || needscamera[curr->right].first){
                
                ++ans;
                needscamera[curr].first = false;
                needscamera[curr].second = true;
                
            }else{
        
                   if(needscamera[curr->left].second || needscamera[curr->right].second){
                        
                       needscamera[curr].first = false;
                   }else{
                       needscamera[curr].first = true;
                       if(visit2.empty()) ++ans;
                       
                   }
                    needscamera[curr].second = false;
            
            }
        
        }
            
            return ans; 
    }
        
        
        
        
};
