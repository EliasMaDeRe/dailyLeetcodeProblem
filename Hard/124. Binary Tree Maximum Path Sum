/*
    Link: https://leetcode.com/problems/binary-tree-maximum-path-sum/submissions/
    Time complexity: O(n)
    Space complexity: O(n)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int res = INT_MIN;
    int maxPathSum(TreeNode* root) {
        
        dfs(root);
        return res;
        
    }
    int dfs(TreeNode* root){
        
        if(!root) return 0;
        
        //sin split
        int leftMAX = dfs(root->left);
        int rightMAX = dfs(root->right);
        
        leftMAX = (leftMAX > 0) ?  leftMAX : 0;
        rightMAX = (rightMAX > 0) ? rightMAX : 0;
        
        if((leftMAX + rightMAX + root->val) > res) res = leftMAX + rightMAX + root->val;
        
        return root->val + max(leftMAX,rightMAX);
        
    }
};
