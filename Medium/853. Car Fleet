/*
    Link: https://leetcode.com/problems/car-fleet/
    Time complexity: O(n(log(n)))
    Space complexity: O(n)
*/
class Solution {
public:
    int carFleet(int target, vector<int>& position, vector<int>& speed) {
        
        vector<pair<float,float> > values;
        stack<pair<float,float> > fleets;
        for(int i = 0; i < position.size(); ++i){
            
            values.push_back({position[i],speed[i]});
            
        }
        sort(values.begin(),values.end(),greater<pair<int,int>>());
        for(int i = 0 ; i < values.size(); ++i){
            
            if(fleets.empty()) fleets.push(values[i]);
            else{
                
                float arrive = (target-values[i].first)/values[i].second;
                float lastfleet = (target-fleets.top().first)/fleets.top().second;
                if(arrive > lastfleet) fleets.push(values[i]);
                
            }
            
        }
        
        return fleets.size();
        
    }
};
