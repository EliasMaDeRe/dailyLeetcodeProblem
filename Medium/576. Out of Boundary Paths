/*
    Link: https://leetcode.com/problems/out-of-boundary-paths/
    Time complexity: O(nmk)
    Space complexity: O(nmk)
*/
class Solution {
public:
    int dp[51][51][51];

    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        
        memset(dp,-1,sizeof(dp));
        
        dp[startRow][startColumn][maxMove] = ways(m,n,maxMove,startRow,startColumn);
        
        return dp[startRow][startColumn][maxMove];
        
    }
    int ways(int& m, int& n, int maxMove, int startRow, int startColumn){
        
        if(startRow < 0 || startColumn < 0 || startRow >= m || startColumn >= n) return 1;
        
        if(!maxMove) return 0;
        
        if(dp[startRow][startColumn][maxMove] != -1) return dp[startRow][startColumn][maxMove];
        
        
        dp[startRow][startColumn][maxMove] = 0;
        dp[startRow][startColumn][maxMove] += ways(m,n,maxMove-1,startRow-1,startColumn);
        dp[startRow][startColumn][maxMove]%=1000000007;
        dp[startRow][startColumn][maxMove] += ways(m,n,maxMove-1,startRow,startColumn+1);
        dp[startRow][startColumn][maxMove]%=1000000007;
        dp[startRow][startColumn][maxMove] += ways(m,n,maxMove-1,startRow+1,startColumn);
        dp[startRow][startColumn][maxMove]%=1000000007;
        dp[startRow][startColumn][maxMove] += ways(m,n,maxMove-1,startRow,startColumn-1);
        dp[startRow][startColumn][maxMove]%=1000000007;

        
        return dp[startRow][startColumn][maxMove];
        
    }
};
