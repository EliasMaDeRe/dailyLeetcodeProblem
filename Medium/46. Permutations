/*
    Link: https://leetcode.com/problems/permutations/
    Time complexity: O(n!)
    Space complexity: O(n)
*/
class Solution {
public:
    unordered_set<int> available;
    vector<vector<int>> ans;
    vector<vector<int>> permute(vector<int>& nums) {
        

        vector<int> curr;
        
        permutations(nums,curr);
        
        return ans;
        
    }
    void permutations(vector<int>& nums, vector<int>& curr){
        
        
        if(curr.size() == nums.size()){
            
            ans.push_back(curr);
            return;
            
        } 
        
        for(int i = 0; i < nums.size(); ++i){
            
            
            if(nums[i] != INT_MAX){
                
                int number = nums[i];
                curr.push_back(number);
                nums[i] = INT_MAX;
                permutations(nums,curr);
                nums[i] = number;
                curr.pop_back();
                
            }
            
            
            
        }
        
    }
    
    
};
