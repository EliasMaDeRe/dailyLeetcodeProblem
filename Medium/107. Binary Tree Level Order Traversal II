/*
    Link: https://leetcode.com/problems/binary-tree-level-order-traversal-ii/
    Time complexity: O(n(log(n)))
    Space complexity: O(n)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,vector<int>> val;
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        
        OrderT(root,1);
        vector<vector<int>> ans;
        
        for(int i = val.size(); i > 0; --i){
            
            ans.push_back(val[i]);
            
        }
        
        return ans;
        
    }
    void OrderT(TreeNode* root, int level){
        
        if(!root) return;
        
        val[level].push_back(root->val);
        OrderT(root->left,level+1);
        OrderT(root->right,level+1);
        
    }
};
