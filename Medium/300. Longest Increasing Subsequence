/*
    Link: https://leetcode.com/problems/longest-increasing-subsequence/
    Time complexity: O(n^2)
    Space complexity: O(n)
*/
class Solution {
public:
    
    int lengthOfLIS(const vector<int>& nums) {
        
        vector<int> dp(nums.size(),1);
        
        
        if(nums.size() == 1) return 1;
        if(nums.size() == 2) return (nums[0] < nums[1]) + 1;
        
        dp[nums.size()-2] = (nums[nums.size()-2] < nums[nums.size()-1]) + 1;
        
        int ans = dp[nums.size()-2];
        
        for(int i = nums.size()-3; i >= 0; --i){
            
            for(int j = i; j < nums.size(); ++j){
                
                if(nums[i] < nums[j]) dp[i] = max(dp[i],dp[j]+1);
                
                
            }
            ans = max(ans,dp[i]);
            
        }
        
        return ans;
        
    }
};
