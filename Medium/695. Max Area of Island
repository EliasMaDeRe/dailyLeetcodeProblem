/*
    Link: https://leetcode.com/problems/max-area-of-island/
    Time complexity: O(n*m)
    Space complexity: O(n*m)
*/
class Solution {
public:
    bool visited[51][51]={0};
    int ans = 0;
    int count = 0;

    int maxAreaOfIsland(vector<vector<int>>& grid) {

        for(int i = 0; i < grid.size(); ++i){
            
            for(int j = 0; j < grid[0].size(); ++j){
                
                if(grid[i][j] && !visited[i][j]){
                    count = 0;
                    dfs(i,j,count,grid);
                    ans = max(count,ans);

                }
                
            }
            
        }
        
        return ans;
        
    }
    void dfs(int i, int j, int& count, vector<vector<int>>& grid){

        visited[i][j] = true;
        ++count;
        if(i-1 >= 0 && !visited[i-1][j] && grid[i-1][j]) dfs(i-1,j,count,grid);
        if(j+1 < grid[0].size() && !visited[i][j+1] && grid[i][j+1]) dfs(i,j+1,count,grid);
        if(i+1 < grid.size() && !visited[i+1][j] && grid[i+1][j]) dfs(i+1,j,count,grid);
        if(j-1 >= 0 && !visited[i][j-1] && grid[i][j-1]) dfs(i,j-1,count,grid);
        
    }
};
