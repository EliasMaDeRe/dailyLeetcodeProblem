/*
    Link: https://leetcode.com/problems/search-in-rotated-sorted-array/
    Time complexity: O(log(n))
    Space complexity: O(1)
*/
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int b=0,e=nums.size()-1,mid,ans=-1;
        while(b <= e){
            
            mid = (b+e)/2;
            cout<<nums[mid]<<endl;
            if(nums[mid] == target){
                
                ans = mid;
                break;
                
            }
            if((nums[mid] < nums[0]) != (target < nums[0])){
                
                if(target < nums[0]){
                    
                    b = mid+1;
                    
                }else{
                    
                    e = mid-1;
                    
                }                

                
            }else{
                
                if(nums[mid] < target){
                    
                    b = mid+1;
                    
                }else{
                    
                    e = mid-1;
                    
                }
                
            }
            
            
        }
        return ans;
    }
};
