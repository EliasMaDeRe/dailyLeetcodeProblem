/*
    Link: https://leetcode.com/problems/maximum-binary-tree-ii/
    Time complexity: O(n)
    Space complexity: O(1)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoMaxTree(TreeNode* root, int val) {
        
        TreeNode* newnode = new TreeNode(val);
        if(!root){
            
            root = newnode;
            return root;
            
        }
        
        TreeNode* curr = root;
        TreeNode* prev = NULL;
        
        
        while(curr){
            
            if(val >= curr->val){
                
                if(curr == root){
                    
                    newnode->left = root;
                    root = newnode;
                    return root;
                    
                }
                
                prev->right = newnode;
                newnode->left = curr;
                return root;
                
                
                
                
            }
            prev = curr;
            curr = curr->right;
            
        }
        prev->right = newnode;
        return root;
        
        // 1 10 7 2 5
        
    }
};
