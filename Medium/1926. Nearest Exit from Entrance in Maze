/*
    Link: https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/
    Time complexity: O(n*m)
    Space complexity: O(n*m)
*/
class Solution {
public:
 
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {

        queue<pair<pair<int,int>,int>> tovisit;
        int i,j,movements;
        int ans = INT_MAX;
        maze[entrance[0]][entrance[1]] = '+';
        
        for(tovisit.push({{entrance[0],entrance[1]},0}); !tovisit.empty(); tovisit.pop()){
            
            i = tovisit.front().first.first;
            j = tovisit.front().first.second;
            movements = tovisit.front().second;
            
            if((!i || !j || i == maze.size()-1 || j == maze[0].size()-1) && movements){
                
                return movements;
                
            }
                
            
            if(i-1 >= 0 && maze[i-1][j] != '+'){
                
                tovisit.push({{i-1,j},movements+1});
                maze[i-1][j] = '+';
                
            } 
            if(j+1 < maze[0].size() && maze[i][j+1] != '+'){
                
                tovisit.push({{i,j+1},movements+1});
                maze[i][j+1] = '+';
                
            } 
            if(i+1 < maze.size() && maze[i+1][j] != '+'){
                
                tovisit.push({{i+1,j},movements+1});
                maze[i+1][j];
                
            } 
            if(j-1 >= 0 && maze[i][j-1] != '+'){
                
                tovisit.push({{i,j-1},movements+1});
                maze[i][j-1] = '+';
                
            } 
            
            
        }
        
        return -1;
        
    }
    
};

    
