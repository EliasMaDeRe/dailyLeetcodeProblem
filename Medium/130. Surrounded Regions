/*
    Link: https://leetcode.com/problems/surrounded-regions/
    Time complexity: O(n*m)
    Space complexity: O(n*m)
*/
class Solution {
public:
    void solve(vector<vector<char>>& board) {
        
        for(int i = 0; i < board.size(); ++i)
            for(int j = 0; j < board[0].size(); ++j)
                if((!i || !j || i == board.size()-1 || j == board[0].size()-1) &&
                    (board[i][j] == 'O'))
                        transform(i,j,board);
                    
        for(int i = 0; i < board.size(); ++i)
            for(int j = 0; j < board[0].size(); ++j)
                if(board[i][j] == 'O') board[i][j] = 'X';
                else if(board[i][j] == 'S') board[i][j] = 'O';
                
                    
        
    }
    void transform(int i, int j, vector<vector<char>>& board){
        
        board[i][j] = 'S';
        if(i-1 >= 0 && board[i-1][j] == 'O') transform(i-1,j,board);
        if(j+1 < board[0].size() && board[i][j+1] == 'O') transform(i,j+1,board);
        if(i+1 < board.size() && board[i+1][j] == 'O') transform(i+1,j,board);
        if(j-1 >= 0 && board[i][j-1] == 'O') transform(i,j-1,board);
        
    }
};
