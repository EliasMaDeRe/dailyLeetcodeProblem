/*
    Link: https://leetcode.com/problems/validate-binary-search-tree/submissions/
    Time complexity: O(n)
    Space complexity: O(n)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> ans;
    bool isValidBST(TreeNode* root) {
        
        return inOrder(root);
        
    }
    bool inOrder(TreeNode* root){
        
        if(!root) return true;
        
        inOrder(root->left);
        if(ans.size() > 1) if(ans.back() <= ans[ans.size()-2]) return false;
        ans.push_back(root->val);
        if(ans.size() > 1) if(ans.back() <= ans[ans.size()-2]) return false;
        inOrder(root->right);
        if(ans.size() > 1) if(ans.back() <= ans[ans.size()-2]) return false;
        return true;
                
    }
    
};
