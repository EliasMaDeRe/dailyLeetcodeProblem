/*
    Link: https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/submissions/
    Time complexity: O(n)
    Space complexity: O(1)
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        
        ListNode* curr = head;
        int s = 0;
        while(curr->next){
            
            curr=curr->next;
            ++s;
            
        }
        if(!s) return NULL;
        ++s/=2;
        ListNode* last = NULL;
        curr = head;
        for(int i = 0; i < s; ++i){
            
            last = curr;
            curr=curr->next;
            
            
        }
        if(last) last->next = curr->next;
        
        return head;
        
    }
};
