/*
    Link: https://leetcode.com/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/submissions/
    Time complexity: O(v+e)
    Space complexity: O(v+e)
*/
class Solution {
public:
    
    unordered_map<int,pair<vector<int>,bool>> adj;
    vector<int> componentSize;
    long long countPairs(const int n,const vector<vector<int>>& edges) {
        
        for(int i = 0; i < edges.size(); ++i){
            
            adj[edges[i][0]].first.push_back(edges[i][1]);
            adj[edges[i][1]].first.push_back(edges[i][0]);
            
        }
        long long ans = ((long long)n*(n-1))/2;
        long long count = 0;
        for(int i = 0; i < n; ++i){
            
            if(!adj[i].second){
                
                count = 0;
                dfs(i,count);
                ans-=(count*(count-1))/2;
                
                
            }
            
        }
        return ans;
        
    }
    void dfs(int key, long long& size){
        
        adj[key].second = true;
        ++size;
        for(int i = 0; i < adj[key].first.size(); ++i){
            
            if(!adj[adj[key].first[i]].second) dfs(adj[key].first[i],size);
            
        }
        
    }
};
