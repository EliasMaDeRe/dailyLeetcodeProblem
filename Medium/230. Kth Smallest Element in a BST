/*
    Link: https://leetcode.com/problems/kth-smallest-element-in-a-bst/
    Time complexity: O(n)
    Space complexity: O(n)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int yetFound = 0;
    int ans = 0;
    int kthSmallest(TreeNode* root, int k) {
    
        inOrder(root,k);
        
        return ans;
    }
    void inOrder(TreeNode* root, int k){
        
        if(!root) return;
        
        inOrder(root->left,k);
        
        ++yetFound;
        if(yetFound == k) ans = root->val;
        
        inOrder(root->right,k);
        
    }
};
