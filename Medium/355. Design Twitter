/*
    Link: https://leetcode.com/problems/design-twitter/
    Time complexity: O(n)
    Space complexity: O(n)
*/
class Twitter {
public:
    unordered_map<int,deque<pair<int,int>>> tweets;
    unordered_map<int,unordered_set<int>> follows;
    long long time;
    Twitter() {
        
        time = 0;
        
    }
    
    void postTweet(int userId, int tweetId) {
        
        tweets[userId].push_front({time,tweetId});
        if(tweets[userId].size() > 10) tweets[userId].pop_back();
        ++time;
        
    }
    
    vector<int> getNewsFeed(int userId) {
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> heap;
        
        for(auto& tweet : tweets[userId]) heap.push(tweet);
        for(auto& follower : follows[userId])
            for(auto& tweet : tweets[follower]){
                heap.push(tweet);
                if(heap.size() > 10) heap.pop();
            }
        vector<int> feed(heap.size(),0);
        for(int i = heap.size()-1; i >= 0; --i){
            
            feed[i] = heap.top().second;
            heap.pop();
            
        }
        return feed;
        
    }
    
    void follow(int followerId, int followeeId) {
        
        follows[followerId].insert(followeeId);
        
    }
    
    void unfollow(int followerId, int followeeId) {
        
        follows[followerId].erase(followeeId);
        
    }
};

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter* obj = new Twitter();
 * obj->postTweet(userId,tweetId);
 * vector<int> param_2 = obj->getNewsFeed(userId);
 * obj->follow(followerId,followeeId);
 * obj->unfollow(followerId,followeeId);
 */
