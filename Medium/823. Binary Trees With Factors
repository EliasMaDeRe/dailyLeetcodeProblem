/*
    Link: https://leetcode.com/problems/binary-trees-with-factors/
    Time complexity: O(n^2)
    Space complexity: O(n)
*/
class Solution {
public:
    int numFactoredBinaryTrees(vector<int>& arr) {
        
        sort(arr.begin(),arr.end());
        unordered_map<long long,long long> dp;
        long long ans = 0;
        long long m = 1e9 + 7;
        
        for(int i = 0; i < arr.size(); ++i){
            
            dp[arr[i]] = 1;
            
            for(int j = 0; j < i; ++j){
                
                if(arr[i] % arr[j] == 0){
                    dp[arr[i]] +=  (dp[arr[j]] * dp[arr[i]/arr[j]]) % m;
                    dp[arr[i]] %= m;
                }
                
            }
            
            ans = (ans + dp[arr[i]]) % m;
            
        }
        
        return ans;
        
    }
};
