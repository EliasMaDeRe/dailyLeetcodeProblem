/*
    Link: https://leetcode.com/problems/word-subsets/
    Time complexity: O(n*k)
    Space complexity: O(k)
*/
class Solution {
public:
    vector<string> wordSubsets(vector<string>& words1, vector<string>& words2) {
        vector<string> ans;
        int needed[26] = {};
        for(int i = 0; i < words2.size(); ++i){
            
            int curr[26] = {};
            
            for(int j = 0; j < words2[i].size(); ++j){
                
                ++curr[words2[i][j]-'a'];
                
            }
            
            for(int j = 0; j < 26; ++j){
                
                needed[j] = max(needed[j],curr[j]);
                
            }
            
        }
        for(int i = 0; i < words1.size(); ++i){
            
            int curr[26] = {};
            
            for(int j = 0; j < words1[i].size(); ++j){
                
                ++curr[words1[i][j]-'a'];
                
            }
            for(int j = 0; j < 26; ++j){
                
                if(needed[j] > curr[j]) break;
                if(j == 25) ans.push_back(words1[i]);
                
            }
            
        }
        
        return ans;
        
    }
};
