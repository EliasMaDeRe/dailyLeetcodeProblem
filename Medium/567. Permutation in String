/*
    Link: https://leetcode.com/problems/permutation-in-string/
    Time complexity: O(n(log(n)))
    Space complexity: O(1) since there are only 26 possible keys
*/
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        
        map<char,int> chars;
        
        for(int i = 0; i < s1.size(); ++i){
            
            chars[s1[i]]++;
            
        }
        
        int s=0,e=0,m = s1.size();
        bool b = false;
        while(s < s2.size() && e < s2.size()){
            
            
            
            if(chars[s2[e]]-1 >= 0){
                
                
                chars[s2[e]]--;
                ++e;
                --m;
                if(!m){
                    
                    return true;
                    
                }
                
            }else{
                
                while(s < e){
                    
                    if(s2[s] == s2[e]){
                        
                        break;
                        
                    }
                    chars[s2[s]]++;
                    ++s;
                    ++m;
                    b = true;
                    
                }
                if(b){
                    
                    --e;
                    --s;
                    b = false;
                    
                }
                ++s;
                ++e;

                
            }
            
        }
        
        return false;
        
    }
};
