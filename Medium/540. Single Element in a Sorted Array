/*
    Link: https://leetcode.com/problems/single-element-in-a-sorted-array/
    Time complexity: O(log(n))
    Space complexity: O(1)
*/
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        
        int s = 0, e = nums.size()-1, mid;

        while(s <= e){
            
            mid = (s+e)/2;

            if(!mid || mid == nums.size()-1 || (nums[mid-1] != nums[mid] && nums[mid+1] != nums[mid])){
                
                return nums[mid];
                
            }
            if((mid-0) % 2 == 0)
                if(nums[mid-1] == nums[mid])
                    e = mid-1;
                else s = mid+1;
            else if(nums[mid+1] == nums[mid])
                    e = mid-1;
                else s = mid+1;
            
        }
        
        return nums[mid];
        
    }
};
