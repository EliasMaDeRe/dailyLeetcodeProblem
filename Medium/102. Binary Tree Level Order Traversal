/*
    Link: https://leetcode.com/problems/binary-tree-level-order-traversal/submissions/
    Time complexity: O(n)
    Space complexity: O(n)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        
        TreeNode* curr = root;
        queue<TreeNode*> toVisit;
        
        vector<vector<int>> ans;
        if(curr) toVisit.push(curr);
        while(!toVisit.empty()){
            
            vector<int> currlevel;
            queue<TreeNode*> aux;
            
                while(!toVisit.empty()){

                    
                    currlevel.push_back(toVisit.front()->val); 

                    if(toVisit.front()->left) aux.push(toVisit.front()->left);
                    if(toVisit.front()->right) aux.push(toVisit.front()->right);

                    toVisit.pop();

                }
            ans.push_back(currlevel);
            toVisit = aux;
            
        }
        
        return ans;
        
    }
};
