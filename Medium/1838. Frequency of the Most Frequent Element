/*
    Link: https://leetcode.com/problems/frequency-of-the-most-frequent-element/
    Time complexity: O(n(log(n)))
    Space complexity: O(1)
*/
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k) {
        
        int ans = 0;
        sort(nums.begin(),nums.end(),greater<int>());
        int st = 0, e = 0;
        int curr = k;
        while(e < nums.size()){
            
            if(k - (nums[st] - nums[e]) >= 0){
                
                k-=nums[st]-nums[e];
                ans = max(ans,e+1-st);
                ++e;
                
            }else{
                
                ++st;
                k+=(nums[st-1]-nums[st])*(e-st);
                
            }
            
        }
        
        return ans;
        
    }
};
