/*
    Link: https://leetcode.com/problems/clone-graph/submissions/
    Time complexity: O(n)
    Space complexity: O(n)
*/
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* created[101] = {NULL};
    Node* cloneGraph(const Node* node) {
        
        if(!node) return NULL;
        if(node->neighbors.empty()) return new Node(node->val);
        
        Node* curr = create(node);
        
        return curr;
        
    }
    Node* create(const Node* node){
        
        Node* curr = new Node(node->val);
        created[curr->val] = curr;
        for(int i = 0; i < node->neighbors.size(); ++i){
            
            if(created[node->neighbors[i]->val]) curr->neighbors.push_back(created[node->neighbors[i]->val]);
            else{
                
                curr->neighbors.push_back(create(node->neighbors[i]));
                
            }
        }
        
        return curr;
        
    }
};
