/*
    Link: https://leetcode.com/problems/top-k-frequent-elements/
    Time complexity: O(nlog(n))
    Space complexity: O(n)
*/
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        
        vector<int> ans;
        priority_queue<pair<int,int> > temp;
        map<int,int> freq;
        
        for(int i = 0; i < nums.size(); ++i){
            
            freq[nums[i]]++;
            
        }
        
        for(auto x : freq){
            
            temp.push({x.second,x.first});
            
        }
        
        for(int i = 0; i < k; ++i){
            
            ans.push_back(temp.top().second);
            temp.pop();
            
        }
        
        
        return ans;
    }
};
