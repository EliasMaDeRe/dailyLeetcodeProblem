/*
    Link: https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/submissions/
    Time complexity: O(n)
    Space complexity: O(n)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int currindex = 0;
        return build(preorder,inorder,currindex,0,inorder.size()-1);
        
        
    }
    TreeNode* build(vector<int>& preorder, vector<int>& inorder, int& currindex, int left, int right){
        
        if(left>right) return NULL;
        int pivot = left;
        while(preorder[currindex] != inorder[pivot]) pivot++;
        currindex++;
        TreeNode* currNode = new TreeNode(inorder[pivot]);
        currNode->left = build(preorder,inorder,currindex,left,pivot-1);
        currNode->right = build(preorder,inorder,currindex,pivot+1,right);
        return currNode;
        
        
    }
};
